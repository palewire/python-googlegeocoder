name: Continuous Deployment

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  lint-python:
    name: Lint Python code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pipenv'

      - name: Install pipenv
        run: curl https://raw.githubusercontent.com/pypa/pipenv/master/get-pipenv.py | python

      - id: pipenv-install
        name: Install Python dependencies
        run: pipenv sync --dev

      - id: lint
        name: Lint
        run: pipenv run flake8 ./googlegeocoder

  test-python:
    name: Test Python code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pipenv'

      - name: Install pipenv
        run: curl https://raw.githubusercontent.com/pypa/pipenv/master/get-pipenv.py | python

      - id: pipenv-install
        name: Install Python dependencies
        run: pipenv install --dev --python `which python`

      - id: run
        name: Run tests
        run: pipenv run python test.py
        shell: bash
        env:
          GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}

  test-build:
    name: Build Python package
    runs-on: ubuntu-latest
    needs: [test-python]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pipenv'

      - name: Install pipenv
        run: curl https://raw.githubusercontent.com/pypa/pipenv/master/get-pipenv.py | python

      - id: pipenv-install
        name: Install Python dependencies
        run: pipenv sync --dev

      - id: build
        name: Build release
        run: |
          pipenv run python setup.py sdist
          pipenv run python setup.py bdist_wheel

      - id: check
        name: Check release
        run: pipenv run twine check dist/*

      - id: save
        name: Save artifact
        uses: actions/upload-artifact@v4
        with:
          name: test-release-${{ github.run_number }}
          path: ./dist
          if-no-files-found: error

  tag-release:
    name: Tagged PyPI release
    runs-on: ubuntu-latest
    needs: [test-build]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    steps:
      - id: fetch
        name: Fetch artifact
        uses: actions/download-artifact@v4
        with:
          name: test-release-${{ github.run_number }}
          path: ./dist

      - id: publish
        name: Publish release
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          verbose: true
          verify_metadata: false
